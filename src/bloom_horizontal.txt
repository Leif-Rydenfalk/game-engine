@group(0) @binding(0) var t_input: texture_2d<f32>;
@group(0) @binding(1) var t_output: texture_storage_2d<rgba16float, write>;

const WEIGHTS: array<f32, 5> = array<f32, 5>(0.19638062, 0.29675293, 0.09442139, 0.01037598, 0.00025940);
const OFFSETS: array<f32, 5> = array<f32, 5>(0.0, 1.41176471, 3.29411765, 5.17647059, 7.05882353);

@compute @workgroup_size(8, 8)
fn main(@builtin(global_invocation_id) id: vec3<u32>) {
    let dims = textureDimensions(t_input);
    let uv = vec2<f32>(f32(id.x) / f32(dims.x), f32(id.y) / f32(dims.y));
    var color = vec3<f32>(0.0);
    var weight_sum = 0.0;
    let texel_size = vec2<f32>(1.0 / f32(dims.x), 1.0 / f32(dims.y));
    color += textureLoad(t_input, vec2<i32>(id.xy), 0).rgb * WEIGHTS[0];
    weight_sum += WEIGHTS[0];
    for (var i = 1u; i < 5u; i = i + 1u) {
        let offset = vec2<f32>(OFFSETS[i] * texel_size.x * 0.5, 0.0);
        color += textureLoad(t_input, vec2<i32>(id.xy) + vec2<i32>(offset * vec2<f32>(f32(dims.x), 0.0)), 0).rgb * WEIGHTS[i];
        color += textureLoad(t_input, vec2<i32>(id.xy) - vec2<i32>(offset * vec2<f32>(f32(dims.x), 0.0)), 0).rgb * WEIGHTS[i];
        weight_sum += WEIGHTS[i] * 2.0;
    }
    color /= weight_sum;
    textureStore(t_output, vec2<i32>(id.xy), vec4<f32>(color, 1.0));
}